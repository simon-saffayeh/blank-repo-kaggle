{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8a08c972",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-02T15:30:58.512847Z",
     "iopub.status.busy": "2024-07-02T15:30:58.512061Z",
     "iopub.status.idle": "2024-07-02T15:31:00.646386Z",
     "shell.execute_reply": "2024-07-02T15:31:00.645382Z"
    },
    "papermill": {
     "duration": 2.140843,
     "end_time": "2024-07-02T15:31:00.648874",
     "exception": false,
     "start_time": "2024-07-02T15:30:58.508031",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/animal-crossing-new-horizons-nookplaza-dataset/construction.csv\n",
      "/kaggle/input/animal-crossing-new-horizons-nookplaza-dataset/bottoms.csv\n",
      "/kaggle/input/animal-crossing-new-horizons-nookplaza-dataset/accessories.csv\n",
      "/kaggle/input/animal-crossing-new-horizons-nookplaza-dataset/insects.csv\n",
      "/kaggle/input/animal-crossing-new-horizons-nookplaza-dataset/floors.csv\n",
      "/kaggle/input/animal-crossing-new-horizons-nookplaza-dataset/shoes.csv\n",
      "/kaggle/input/animal-crossing-new-horizons-nookplaza-dataset/wall-mounted.csv\n",
      "/kaggle/input/animal-crossing-new-horizons-nookplaza-dataset/achievements.csv\n",
      "/kaggle/input/animal-crossing-new-horizons-nookplaza-dataset/umbrellas.csv\n",
      "/kaggle/input/animal-crossing-new-horizons-nookplaza-dataset/rugs.csv\n",
      "/kaggle/input/animal-crossing-new-horizons-nookplaza-dataset/housewares.csv\n",
      "/kaggle/input/animal-crossing-new-horizons-nookplaza-dataset/art.csv\n",
      "/kaggle/input/animal-crossing-new-horizons-nookplaza-dataset/reactions.csv\n",
      "/kaggle/input/animal-crossing-new-horizons-nookplaza-dataset/miscellaneous.csv\n",
      "/kaggle/input/animal-crossing-new-horizons-nookplaza-dataset/dress-up.csv\n",
      "/kaggle/input/animal-crossing-new-horizons-nookplaza-dataset/photos.csv\n",
      "/kaggle/input/animal-crossing-new-horizons-nookplaza-dataset/bags.csv\n",
      "/kaggle/input/animal-crossing-new-horizons-nookplaza-dataset/villagers.csv\n",
      "/kaggle/input/animal-crossing-new-horizons-nookplaza-dataset/recipes.csv\n",
      "/kaggle/input/animal-crossing-new-horizons-nookplaza-dataset/socks.csv\n",
      "/kaggle/input/animal-crossing-new-horizons-nookplaza-dataset/fossils.csv\n",
      "/kaggle/input/animal-crossing-new-horizons-nookplaza-dataset/fencing.csv\n",
      "/kaggle/input/animal-crossing-new-horizons-nookplaza-dataset/tops.csv\n",
      "/kaggle/input/animal-crossing-new-horizons-nookplaza-dataset/wallpaper.csv\n",
      "/kaggle/input/animal-crossing-new-horizons-nookplaza-dataset/music.csv\n",
      "/kaggle/input/animal-crossing-new-horizons-nookplaza-dataset/posters.csv\n",
      "/kaggle/input/animal-crossing-new-horizons-nookplaza-dataset/other.csv\n",
      "/kaggle/input/animal-crossing-new-horizons-nookplaza-dataset/headwear.csv\n",
      "/kaggle/input/animal-crossing-new-horizons-nookplaza-dataset/tools.csv\n",
      "/kaggle/input/animal-crossing-new-horizons-nookplaza-dataset/fish.csv\n",
      "/kaggle/input/heights/GaltonFamilies.csv\n",
      "/kaggle/input/car-prices/Car_prices.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "data = pd.read_csv(\"/kaggle/input/car-prices/Car_prices.csv\")\n",
    "y = data.Price\n",
    "columns = ['MPG.city', 'MPG.highway']\n",
    "X = data[columns]\n",
    "# MPG_city = input(\"Enter the miles per gallon in a city:\")\n",
    "# MPG_highway = input(\"Enter the miles per gallon in a highway:\")\n",
    "# input_data = pd.DataFrame({\n",
    "#     'MPG.city': [MPG_city],\n",
    "#     'MPG.highway': [MPG_highway]\n",
    "# })\n",
    "# data_model = DecisionTreeRegressor(random_state=1)\n",
    "# data_model.fit(X,y)\n",
    "# print(data_model.predict(input_data))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f904fb59",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-02T15:31:00.655918Z",
     "iopub.status.busy": "2024-07-02T15:31:00.655601Z",
     "iopub.status.idle": "2024-07-02T15:31:00.683127Z",
     "shell.execute_reply": "2024-07-02T15:31:00.681998Z"
    },
    "papermill": {
     "duration": 0.033424,
     "end_time": "2024-07-02T15:31:00.685312",
     "exception": false,
     "start_time": "2024-07-02T15:31:00.651888",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeRegressor(random_state=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeRegressor</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeRegressor(random_state=1)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "DecisionTreeRegressor(random_state=1)"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data2 = pd.read_csv(\"/kaggle/input/heights/GaltonFamilies.csv\")\n",
    "y2 = data2.childHeight\n",
    "columns2 = [\"mother\",\"father\"]\n",
    "X2 = data2[columns2]\n",
    "\n",
    "# mother = input(\"Mother height:\")\n",
    "# father = input(\"Father height:\")\n",
    "\n",
    "# input_data2 = pd.DataFrame({\n",
    "#     'mother': [mother],\n",
    "#     'father': [father],\n",
    "# })\n",
    "\n",
    "data_model2 = DecisionTreeRegressor(random_state=1)\n",
    "data_model2.fit(X2,y2)\n",
    "# print(data_model2.predict(input_data2))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8adf0ba",
   "metadata": {
    "papermill": {
     "duration": 0.001876,
     "end_time": "2024-07-02T15:31:00.689431",
     "exception": false,
     "start_time": "2024-07-02T15:31:00.687555",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5315971,
     "sourceId": 8834193,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 5316158,
     "sourceId": 8834437,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 661950,
     "sourceId": 2314697,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 5.198287,
   "end_time": "2024-07-02T15:31:01.210258",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-02T15:30:56.011971",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
